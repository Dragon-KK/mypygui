{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"home Please see the abc for further details.","title":"Home"},{"location":"#home","text":"Please see the abc for further details.","title":"home"},{"location":"objects/browser-window/","text":"BrowerWindow .property-name{ background-color:cyan; color: black; } class BrowserWindow:... Handles the loading and showing of pages BrowserWindow.on_ready : Promise BrowserWindow.on_ready : Promise '''Resolved when the BrowserWindow has finished initializing''' BrowserWindow.on_close : Promise '''Resolved when the BrowserWindow is going to close''' BrowserWindow.active_page : Page '''Reference to the page that is being shown currently''' BrowserWindow.worker : Worker '''A Service Provider that can be used by scripts''' BrowserWindow.resource_handler : ResourceHandler '''Keeps track of all resources''' BrowserWindow.layout_handler : LayoutHandler '''The entity that deals with the rendering calls of the currently shown page''' BrowserWindow.window_provider : WindowProvider '''Entity that deals with context creation''' BrowserWindow.event_handler : EventHandler '''Entity that deals with handling dom events''' BrowserWindow.tmp_store : Object '''An object that persists between page loads''' def load_page( self, uri : fs.URI, persist = False ) -> Promise: '''Loads a page onto memory asynchrounoulsy given a uri''' def show_page( self, raw : str, uri : fs.URI ) -> Promise: ''' Shows the page NOTE: Returns an always resolved promise ''' def end(self, reason = 'unknown'): ''' Ends the application (by ending the window_provider) ''' def execute_snippet(self, code_snippet,_locals, src = 'devtools'): '''Runs a code snippet on the active page'''","title":"Browser Window"},{"location":"objects/browser-window/#browerwindow","text":".property-name{ background-color:cyan; color: black; } class BrowserWindow:... Handles the loading and showing of pages BrowserWindow.on_ready : Promise BrowserWindow.on_ready : Promise '''Resolved when the BrowserWindow has finished initializing''' BrowserWindow.on_close : Promise '''Resolved when the BrowserWindow is going to close''' BrowserWindow.active_page : Page '''Reference to the page that is being shown currently''' BrowserWindow.worker : Worker '''A Service Provider that can be used by scripts''' BrowserWindow.resource_handler : ResourceHandler '''Keeps track of all resources''' BrowserWindow.layout_handler : LayoutHandler '''The entity that deals with the rendering calls of the currently shown page''' BrowserWindow.window_provider : WindowProvider '''Entity that deals with context creation''' BrowserWindow.event_handler : EventHandler '''Entity that deals with handling dom events''' BrowserWindow.tmp_store : Object '''An object that persists between page loads''' def load_page( self, uri : fs.URI, persist = False ) -> Promise: '''Loads a page onto memory asynchrounoulsy given a uri''' def show_page( self, raw : str, uri : fs.URI ) -> Promise: ''' Shows the page NOTE: Returns an always resolved promise ''' def end(self, reason = 'unknown'): ''' Ends the application (by ending the window_provider) ''' def execute_snippet(self, code_snippet,_locals, src = 'devtools'): '''Runs a code snippet on the active page'''","title":"BrowerWindow"},{"location":"objects/page/","text":"Page helro","title":"Page"},{"location":"objects/page/#page","text":"helro","title":"Page"},{"location":"services/events/","text":"Events EventHandler( ServiceProvider ) mypygui.core.services.resource_handling.resource_handler.EventHandler EventHandler.reset EventHandler. reset ( ) \u2192 None Clears pending requests and resets any counters etc EventHandler.release_all_resources EventHandler. release_all_resources ( ) \u2192 None Releases all resources (including persisted resources) EventHandler.release_resource EventHandler. release_resource (request_key) \u2192 None Releases a persisted resource given the resource key NOTE: It is not recommended to use this Parameters: resource_key (use EventHandler._get_request_key to get this) EventHandler.request_resource EventHandler. request_resource (uri?, file_type?, resource_key?, data_resolver?, persist?) \u2192 Promise Requests a resource Parameters: uri : fs.URI The uri that needs to be loaded file_type : fs.FileType The file type of the resource resource_key A backup resource_key just in case a resource key could not be made from the uri (will never happen) data_resolver : (data) \u2192 any A function that will modify the data to a more usable form persist : bool Set persist to true to allow a resource to persist between page loads .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"Events"},{"location":"services/events/#events","text":"","title":"Events"},{"location":"services/events/#eventhandlerserviceprovider","text":"mypygui.core.services.resource_handling.resource_handler.EventHandler","title":"EventHandler(ServiceProvider)"},{"location":"services/events/#eventhandlerreset","text":"EventHandler. reset ( ) \u2192 None Clears pending requests and resets any counters etc","title":"EventHandler.reset"},{"location":"services/events/#eventhandlerrelease_all_resources","text":"EventHandler. release_all_resources ( ) \u2192 None Releases all resources (including persisted resources)","title":"EventHandler.release_all_resources"},{"location":"services/events/#eventhandlerrelease_resource","text":"EventHandler. release_resource (request_key) \u2192 None Releases a persisted resource given the resource key NOTE: It is not recommended to use this Parameters: resource_key (use EventHandler._get_request_key to get this)","title":"EventHandler.release_resource"},{"location":"services/events/#eventhandlerrequest_resource","text":"EventHandler. request_resource (uri?, file_type?, resource_key?, data_resolver?, persist?) \u2192 Promise Requests a resource Parameters: uri : fs.URI The uri that needs to be loaded file_type : fs.FileType The file type of the resource resource_key A backup resource_key just in case a resource key could not be made from the uri (will never happen) data_resolver : (data) \u2192 any A function that will modify the data to a more usable form persist : bool Set persist to true to allow a resource to persist between page loads .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"EventHandler.request_resource"},{"location":"services/layout_managing/","text":"","title":"Layout Managing"},{"location":"services/rendering/","text":"","title":"Rendering"},{"location":"services/resource_handling/","text":"Resource Handling ResourceHandler( ServiceProvider ) mypygui.core.services.resource_handling.resource_handler.ResourceHandler ResourceHandler.persisted_keys ResourceHandler. persisted_keys set[str( fs.URI )] The set of all keys that were marked to persist between page loads ResourceHandler.reset ResourceHandler. reset ( ) \u2192 None Clears pending requests and resets any counters etc ResourceHandler.release_all_resources ResourceHandler. release_all_resources ( ) \u2192 None Releases all resources (including persisted resources) ResourceHandler.release_resource ResourceHandler. release_resource (request_key) \u2192 None Releases a persisted resource given the resource key NOTE: It is not recommended to use this Parameters: resource_key (use ResourceHandler._get_request_key to get this) ResourceHandler.request_resource ResourceHandler. request_resource (uri?, file_type?, resource_key?, data_resolver?, persist?) \u2192 Promise Requests a resource Parameters: uri : fs.URI The uri that needs to be loaded file_type : fs.FileType The file type of the resource resource_key A backup resource_key just in case a resource key could not be made from the uri (will never happen) data_resolver : (data) \u2192 any A function that will modify the data to a more usable form persist : bool Set persist to true to allow a resource to persist between page loads .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"Resource Handling"},{"location":"services/resource_handling/#resource-handling","text":"","title":"Resource Handling"},{"location":"services/resource_handling/#resourcehandlerserviceprovider","text":"mypygui.core.services.resource_handling.resource_handler.ResourceHandler","title":"ResourceHandler(ServiceProvider)"},{"location":"services/resource_handling/#resourcehandlerpersisted_keys","text":"ResourceHandler. persisted_keys set[str( fs.URI )] The set of all keys that were marked to persist between page loads","title":"ResourceHandler.persisted_keys"},{"location":"services/resource_handling/#resourcehandlerreset","text":"ResourceHandler. reset ( ) \u2192 None Clears pending requests and resets any counters etc","title":"ResourceHandler.reset"},{"location":"services/resource_handling/#resourcehandlerrelease_all_resources","text":"ResourceHandler. release_all_resources ( ) \u2192 None Releases all resources (including persisted resources)","title":"ResourceHandler.release_all_resources"},{"location":"services/resource_handling/#resourcehandlerrelease_resource","text":"ResourceHandler. release_resource (request_key) \u2192 None Releases a persisted resource given the resource key NOTE: It is not recommended to use this Parameters: resource_key (use ResourceHandler._get_request_key to get this)","title":"ResourceHandler.release_resource"},{"location":"services/resource_handling/#resourcehandlerrequest_resource","text":"ResourceHandler. request_resource (uri?, file_type?, resource_key?, data_resolver?, persist?) \u2192 Promise Requests a resource Parameters: uri : fs.URI The uri that needs to be loaded file_type : fs.FileType The file type of the resource resource_key A backup resource_key just in case a resource key could not be made from the uri (will never happen) data_resolver : (data) \u2192 any A function that will modify the data to a more usable form persist : bool Set persist to true to allow a resource to persist between page loads .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"ResourceHandler.request_resource"},{"location":"services/service_provider/","text":"","title":"Service Provider"},{"location":"services/worker/","text":"","title":"Worker"},{"location":"user-guide/getting-started/","text":"getting started Create an instance of the BrowserWindow browser_window = BrowserWindow()","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"Create an instance of the BrowserWindow browser_window = BrowserWindow()","title":"getting started"},{"location":"utilities/asynchronous/","text":"Asynchronous Promise mypygui.core.asynchronous.async_tools.Promise Promise.state Promise. state int The state of the promise Promise.result Promise. result any The resolved value or the cancellation reason. It is None by default Promise.then Promise. then (fn, provide_purity?) \u2192 Promise Subscribes to the resolution of the promise Parameters: callback : (result, purity?) NOTE: The purity is only given if `provide_purity` was set to True provide_purity : bool Set to True to know if the promise was resolved before the 'then' method was applied on it Returns: The same promise Promise.catch Promise. catch (fn, provide_purity?) \u2192 Promise Subscribes to the cancellation of the promise Parameters: callback : (reason, purity?) NOTE: The purity is only given if `provide_purity` was set to True provide_purity : bool Set to True to know if the promise was resolved before the 'catch' method was applied on it Returns: The same promise Promise.await_result Promise. await_result ( ) \u2192 None Holds the thread till the promise has been cancelled or resolved Promise.resolve Promise. resolve (result : any) \u2192 None Resolves the promise Promise.cancel Promise. cancel (reason : any) \u2192 None Cancels the promise Promise.ONGOING Promise. ONGOING int (static) The state of a promise which has not been resolved or cancelled Promise.SUCCESS Promise. SUCCESS int (static) The state of a promise which has been resolved Promise.FAILURE Promise. FAILURE int (static) The state of a promise which has been cancelled Signal mypygui.core.asynchronous.async_tools.Signal Basically just threading.Event Miscellaneous Functions mypygui.core.asynchronous.async_tools asynchronously_run (fn, args?, kwargs?, daemon?, name?) \u2192 None Runs the provided function on a new thread NOTE: Setting `daemon` to False will allow the thread to run even after the main thread has ended Decorators thenify thenify (fn, name?) \u2192 fn Runs the function on a new thread whenever it is called and returns a promise that will get resolved when function finishes execution NOTE: Raise an exception to cancel the promise from within the function NOTE: The promise will not be provided to the thenified function promisify promisify (fn, name?) \u2192 fn Runs the function on a new thread whenever it is called and returns a promise that will get resolved when function finishes execution NOTE: The function must take in a parameter called `_promise` which contains the promise that is given in place of the funciton NOTE: The function must resolve or cancel the promise on its own asyncify asyncify (fn, name?) \u2192 fn Marks a function to be run asynchronously (does not create any promises) .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"Asynchronous"},{"location":"utilities/asynchronous/#asynchronous","text":"","title":"Asynchronous"},{"location":"utilities/asynchronous/#promise","text":"mypygui.core.asynchronous.async_tools.Promise","title":"Promise"},{"location":"utilities/asynchronous/#promisestate","text":"Promise. state int The state of the promise","title":"Promise.state"},{"location":"utilities/asynchronous/#promiseresult","text":"Promise. result any The resolved value or the cancellation reason. It is None by default","title":"Promise.result"},{"location":"utilities/asynchronous/#promisethen","text":"Promise. then (fn, provide_purity?) \u2192 Promise Subscribes to the resolution of the promise Parameters: callback : (result, purity?) NOTE: The purity is only given if `provide_purity` was set to True provide_purity : bool Set to True to know if the promise was resolved before the 'then' method was applied on it Returns: The same promise","title":"Promise.then"},{"location":"utilities/asynchronous/#promisecatch","text":"Promise. catch (fn, provide_purity?) \u2192 Promise Subscribes to the cancellation of the promise Parameters: callback : (reason, purity?) NOTE: The purity is only given if `provide_purity` was set to True provide_purity : bool Set to True to know if the promise was resolved before the 'catch' method was applied on it Returns: The same promise","title":"Promise.catch"},{"location":"utilities/asynchronous/#promiseawait_result","text":"Promise. await_result ( ) \u2192 None Holds the thread till the promise has been cancelled or resolved","title":"Promise.await_result"},{"location":"utilities/asynchronous/#promiseresolve","text":"Promise. resolve (result : any) \u2192 None Resolves the promise","title":"Promise.resolve"},{"location":"utilities/asynchronous/#promisecancel","text":"Promise. cancel (reason : any) \u2192 None Cancels the promise","title":"Promise.cancel"},{"location":"utilities/asynchronous/#promiseongoing","text":"Promise. ONGOING int (static) The state of a promise which has not been resolved or cancelled","title":"Promise.ONGOING"},{"location":"utilities/asynchronous/#promisesuccess","text":"Promise. SUCCESS int (static) The state of a promise which has been resolved","title":"Promise.SUCCESS"},{"location":"utilities/asynchronous/#promisefailure","text":"Promise. FAILURE int (static) The state of a promise which has been cancelled","title":"Promise.FAILURE"},{"location":"utilities/asynchronous/#signal","text":"mypygui.core.asynchronous.async_tools.Signal Basically just threading.Event","title":"Signal"},{"location":"utilities/asynchronous/#miscellaneous-functions","text":"mypygui.core.asynchronous.async_tools asynchronously_run (fn, args?, kwargs?, daemon?, name?) \u2192 None Runs the provided function on a new thread NOTE: Setting `daemon` to False will allow the thread to run even after the main thread has ended","title":"Miscellaneous Functions"},{"location":"utilities/asynchronous/#decorators","text":"","title":"Decorators"},{"location":"utilities/asynchronous/#thenify","text":"thenify (fn, name?) \u2192 fn Runs the function on a new thread whenever it is called and returns a promise that will get resolved when function finishes execution NOTE: Raise an exception to cancel the promise from within the function NOTE: The promise will not be provided to the thenified function","title":"thenify"},{"location":"utilities/asynchronous/#promisify","text":"promisify (fn, name?) \u2192 fn Runs the function on a new thread whenever it is called and returns a promise that will get resolved when function finishes execution NOTE: The function must take in a parameter called `_promise` which contains the promise that is given in place of the funciton NOTE: The function must resolve or cancel the promise on its own","title":"promisify"},{"location":"utilities/asynchronous/#asyncify","text":"asyncify (fn, name?) \u2192 fn Marks a function to be run asynchronously (does not create any promises) .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"asyncify"},{"location":"utilities/fs/","text":"fs URI mypygui.core.fs.uri.URI URI.Schema URI. Schema Enum (static) Currently recognized Schemas are file http https URI.schema URI. schema URI.Schema The schema of the uri URI.host URI. host str The host of the uri URI.path URI. path pathlib.Path The path pertaining to the uri URI.queries URI. queries list[str] Queries in the uri URI.fragment URI. fragment str Fragments of the uri URI.parent URI. parent URI The parent of the uri URI.make URI. make ( ) -> URI Creates a new uri relative to the current uri NOTE: This function keeps in mind that http and file uris have to be handled differently NOTE: This function is used by mypygui to handle urls present in the html Parameters: uri_string : str The uri_string (or partial uri string in the case of local url) Returns: The uri that was made (a uri relative to the current one) URI.join URI. join (*parts) \u2192 URI Creates a new uri based on the parts given Parameters: *parts : [...str] Returns: The joined URI URI.to_string URI. to_string ( ) \u2192 str Converts the uri to a string URI.from_uri_string URI. from_uri_string classmethod (uri, _resolve_path?) \u2192 URI Forms the uri using a string Parameters: uri : str The string representation of the uri _resolve_path : bool Resolves the path of the given uri if set to true (False by default ) Returns: A uri from the string URI.from_local_path_string URI. from_local_path_string classmethod (path) \u2192 URI Forms a uri using a path to the given local resource NOTE: The paths must be absolute paths Parameters: path : str The absolute path Returns: A uri from the string Reading mypygui.core.asynchronous.fs.reading FileType FileType Enum Currently recognized filetypes are text bytes load load (uri, file_type?) \u2192 any Loads a file given a uri NOTE: Will load files present both on the web or present locally NOTE: This process is synchronous Parameters: uri : fs.URI URI of the resources that needs to be loaded file_type : FileType The FileType of the resource (FileType.text as default) Returns: The content load_web load_web (uri, file_type?) \u2192 any Loads a given uri using requests.get NOTE: This process is synchronous Parameters: uri : fs.URI URI of the resources that needs to be loaded file_type : FileType The FileType of the resource (FileType.text as default) Returns: The content load_local load_local (uri, file_type?) \u2192 any Loads a file given a uri using pathlib.Path.read_text or pathlib.Path.read_bytes as needed NOTE: This process is synchronous Parameters: uri : fs.URI URI of the resources that needs to be loaded file_type : FileType The FileType of the resource (FileType.text as default) Returns: The content .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"File System"},{"location":"utilities/fs/#fs","text":"","title":"fs"},{"location":"utilities/fs/#uri","text":"mypygui.core.fs.uri.URI","title":"URI"},{"location":"utilities/fs/#urischema","text":"URI. Schema Enum (static) Currently recognized Schemas are file http https","title":"URI.Schema"},{"location":"utilities/fs/#urischema_1","text":"URI. schema URI.Schema The schema of the uri","title":"URI.schema"},{"location":"utilities/fs/#urihost","text":"URI. host str The host of the uri","title":"URI.host"},{"location":"utilities/fs/#uripath","text":"URI. path pathlib.Path The path pertaining to the uri","title":"URI.path"},{"location":"utilities/fs/#uriqueries","text":"URI. queries list[str] Queries in the uri","title":"URI.queries"},{"location":"utilities/fs/#urifragment","text":"URI. fragment str Fragments of the uri","title":"URI.fragment"},{"location":"utilities/fs/#uriparent","text":"URI. parent URI The parent of the uri","title":"URI.parent"},{"location":"utilities/fs/#urimake","text":"URI. make ( ) -> URI Creates a new uri relative to the current uri NOTE: This function keeps in mind that http and file uris have to be handled differently NOTE: This function is used by mypygui to handle urls present in the html Parameters: uri_string : str The uri_string (or partial uri string in the case of local url) Returns: The uri that was made (a uri relative to the current one)","title":"URI.make"},{"location":"utilities/fs/#urijoin","text":"URI. join (*parts) \u2192 URI Creates a new uri based on the parts given Parameters: *parts : [...str] Returns: The joined URI","title":"URI.join"},{"location":"utilities/fs/#urito_string","text":"URI. to_string ( ) \u2192 str Converts the uri to a string","title":"URI.to_string"},{"location":"utilities/fs/#urifrom_uri_string","text":"URI. from_uri_string classmethod (uri, _resolve_path?) \u2192 URI Forms the uri using a string Parameters: uri : str The string representation of the uri _resolve_path : bool Resolves the path of the given uri if set to true (False by default ) Returns: A uri from the string","title":"URI.from_uri_string"},{"location":"utilities/fs/#urifrom_local_path_string","text":"URI. from_local_path_string classmethod (path) \u2192 URI Forms a uri using a path to the given local resource NOTE: The paths must be absolute paths Parameters: path : str The absolute path Returns: A uri from the string","title":"URI.from_local_path_string"},{"location":"utilities/fs/#reading","text":"mypygui.core.asynchronous.fs.reading","title":"Reading"},{"location":"utilities/fs/#filetype","text":"FileType Enum Currently recognized filetypes are text bytes","title":"FileType"},{"location":"utilities/fs/#load","text":"load (uri, file_type?) \u2192 any Loads a file given a uri NOTE: Will load files present both on the web or present locally NOTE: This process is synchronous Parameters: uri : fs.URI URI of the resources that needs to be loaded file_type : FileType The FileType of the resource (FileType.text as default) Returns: The content","title":"load"},{"location":"utilities/fs/#load_web","text":"load_web (uri, file_type?) \u2192 any Loads a given uri using requests.get NOTE: This process is synchronous Parameters: uri : fs.URI URI of the resources that needs to be loaded file_type : FileType The FileType of the resource (FileType.text as default) Returns: The content","title":"load_web"},{"location":"utilities/fs/#load_local","text":"load_local (uri, file_type?) \u2192 any Loads a file given a uri using pathlib.Path.read_text or pathlib.Path.read_bytes as needed NOTE: This process is synchronous Parameters: uri : fs.URI URI of the resources that needs to be loaded file_type : FileType The FileType of the resource (FileType.text as default) Returns: The content .last_word{ color : orangered !important; } .property-description{ font-size:1.2em; } h2{ font-size: 2em; margin: 0 !important; color : white; background-color : #444; padding: 0.3em; margin-top: 1em; border-left: solid 10px grey; } h3{ visibility:hidden; height:0; margin:0; } .location{ color : white; background-color : #444; padding: 0.5em 2em; font-size: 1em; font-family: monospace; border-left: solid 10px grey; } .property-name{ font-family: monospace !important; color: darkcyan; margin: 1em 0 0 0; font-weight : bold; font-size: 1.5em; } .property-type::before{ content: ' : '; } .property-type{ display: inline; font-size:0.75em; color:yellowgreen; } li{ padding-left:1rem; } .property{ margin-left:1em; padding-left:0.5em; border-left:10px solid black; }","title":"load_local"}]}